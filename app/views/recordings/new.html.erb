<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/">Home</a></li>
    <li class="breadcrumb-item active" aria-current="page">Nova Gravação</li>
  </ol>
</nav>

<h2>Nova Gravação</h2>

<div class="btn-group mt-5 mb-5" role="group">
  <button id="chooseRecord" class="btn btn-outline-primary">🎤 Gravar</button>
  <button id="chooseUpload" class="btn btn-outline-secondary">📁 Fazer Upload</button>
</div>

<div id="recordSection" style="display: none;">
  <button id="startBtn" class="btn btn-primary">
    <i class="fas fa-play-circle"></i> Iniciar Gravação
  </button>
  <button id="stopBtn" class="btn btn-danger" disabled>
    <i class="fas fa-stop-circle"></i> Parar
  </button>
</div>

<div id="uploadSection" style="display: none;">
  <label for="audioFileInput" class="form-label">Selecione um arquivo de áudio</label>
  <input type="file" class="form-control" id="audioFileInput" accept="audio/*,video/mp4">
</div>

<div id="formContainer" style="display: none;">
  <audio id="player" controls class="mt-3 mb-3 w-100"></audio>

  <%= form_with model: Recording.new, local: true, html: { multipart: true } do |f| %>
    <div class="mb-3">
      <%= f.label :title, "Nome da gravação" %>
      <%= f.text_field :title, class: "form-control", required: true %>
    </div>

    <div class="mb-3">
      <%= f.label :visibility, "Visibilidade" %>
      <%= f.select :visibility, [['Particular', 'private'], ['Pública', 'public'], ['Não Listada', 'unlisted']], {}, class: "form-select" %>
    </div>

    <%= f.file_field :audio_file, style: "display: none;" %>

    <%= f.submit "Salvar Gravação", class: "btn btn-success" %>
  <% end %>
</div>

<script>
  let mediaRecorder;
  let audioChunks = [];

  const startBtn = document.getElementById('startBtn');
  const stopBtn = document.getElementById('stopBtn');
  const player = document.getElementById('player');
  const fileField = document.querySelector('input[type="file"][name="recording[audio_file]"]');
  const audioFileInput = document.getElementById('audioFileInput');

  const formContainer = document.getElementById('formContainer');
  const recordSection = document.getElementById('recordSection');
  const uploadSection = document.getElementById('uploadSection');

  const chooseRecord = document.getElementById('chooseRecord');
  const chooseUpload = document.getElementById('chooseUpload');

  chooseRecord.onclick = () => {
    recordSection.style.display = 'block';
    uploadSection.style.display = 'none';
    formContainer.style.display = 'none';
  };

  chooseUpload.onclick = () => {
    uploadSection.style.display = 'block';
    recordSection.style.display = 'none';
    formContainer.style.display = 'none';
  };

  startBtn.onclick = async () => {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream);
    audioChunks = [];

    mediaRecorder.ondataavailable = e => {
      if (e.data.size > 0) audioChunks.push(e.data);
    };

    mediaRecorder.onstop = () => {
      const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
      const file = new File([audioBlob], 'gravacao.webm', { type: 'audio/webm' });

      player.src = URL.createObjectURL(audioBlob);

      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      fileField.files = dataTransfer.files;

      formContainer.style.display = 'block';
    };

    mediaRecorder.start();
    startBtn.disabled = true;
    stopBtn.disabled = false;
  };

  stopBtn.onclick = () => {
    mediaRecorder.stop();
    startBtn.disabled = false;
    stopBtn.disabled = true;
  };

  audioFileInput.addEventListener('change', event => {
    const file = event.target.files[0];
    if (file) {
      player.src = URL.createObjectURL(file);

      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      fileField.files = dataTransfer.files;

      formContainer.style.display = 'block';
    }
  });
</script>
